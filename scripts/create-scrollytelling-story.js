#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const storyName = process.argv[2];

if (!storyName) {
  console.error('Usage: node create-scrollytelling-story.js <story-name>');
  console.error('Example: node create-scrollytelling-story.js climate-change');
  process.exit(1);
}

const storyDir = path.join(__dirname, '..', 'pages', storyName);

// Create directory
if (!fs.existsSync(storyDir)) {
  fs.mkdirSync(storyDir, { recursive: true });
}

// Create +page.svelte
const pageContent = `<!-- Generated by create-scrollytelling-story.js -->
<script lang="ts">
  import { onMount } from 'svelte';
  import { scroller } from '$utils/scroll';
  import {
    SEO,
    SiteHeader,
    SiteFooter,
    Theme,
    SiteHeadline,
    BodyText,
    EndNotes,
  } from '@reuters-graphics/graphics-components';
  import { assets } from '$app/paths';
  import { page } from '$app/state';
  import pkg from '$pkg';

  // Import your chart components here
  // import YourChart1 from '$lib/components/charts/YourChart1.svelte';
  // import YourChart2 from '$lib/components/charts/YourChart2.svelte';

  // Styles
  import '@reuters-graphics/graphics-components/scss/main.scss';
  import '$lib/styles/global.scss';

  let currentStep = 0;
  let scrollerInstance: any;

  onMount(() => {
    scrollerInstance = scroller({
      step: '.step',
      offset: 0.8,
      progress: (i) => (currentStep = i),
      debug: true
    });
  });

  // Your story data
  const storyData = {
    seoTitle: "${storyName.replace(/-/g, ' ').replace(/\\b\\w/g, (l) => l.toUpperCase())}",
    seoDescription: "A scrollytelling story about ${storyName.replace(/-/g, ' ')}",
    shareTitle: "${storyName.replace(/-/g, ' ').replace(/\\b\\w/g, (l) => l.toUpperCase())}",
    shareDescription: "Experience the story through scrolling",
    shareImgPath: "images/reuters-graphics.jpg",
    shareImgAlt: "Story preview image",
    hed: "Your Story Headline",
    section: "Graphics",
    sectionUrl: "https://www.reuters.com/graphics/",
    authors: ["Your Name"],
    publishTime: new Date().toISOString(),
    updateTime: "",
    endNotes: [
      {
        title: "Methodology",
        text: "Describe your methodology here"
      },
      {
        title: "Sources",
        text: "List your sources here"
      }
    ]
  };
</script>

<SEO
  baseUrl={import.meta.env.BASE_URL}
  pageUrl={page.url}
  seoTitle={storyData.seoTitle}
  seoDescription={storyData.seoDescription}
  shareTitle={storyData.shareTitle}
  shareDescription={storyData.shareDescription}
  shareImgPath={\`\${assets}/\${storyData.shareImgPath}\`}
  shareImgAlt={storyData.shareImgAlt}
  publishTime={pkg?.reuters?.graphic?.published}
  updateTime={pkg?.reuters?.graphic?.updated}
  authors={pkg?.reuters?.graphic?.authors}
/>

<Theme base="light">
  <SiteHeader />
  
  <div class="scrollytelling-container">
    <!-- Sticky graphic pane -->
    <div class="graphic-pane">
      {#if currentStep === 0}
        <div class="placeholder-chart">
          <h3>Step 0</h3>
          <p>Add your first chart here</p>
        </div>
      {:else if currentStep === 1}
        <div class="placeholder-chart">
          <h3>Step 1</h3>
          <p>Add your second chart here</p>
        </div>
      {:else}
        <div class="placeholder-chart">
          <h3>Step {currentStep}</h3>
          <p>Add more charts as needed</p>
        </div>
      {/if}
    </div>

    <!-- Scrollable text content -->
    <div class="text-content">
      <SiteHeadline
        hed={storyData.hed}
        section={storyData.section}
        sectionUrl={storyData.sectionUrl}
        authors={storyData.authors}
        publishTime={storyData.publishTime}
        updateTime={storyData.updateTime}
      />

      <section class="step">
        <BodyText text="Your first step content goes here. This is where you introduce your story and set the context." />
      </section>

      <section class="step">
        <BodyText text="Your second step content. This is where you can dive deeper into the data or narrative." />
      </section>

      <section class="step">
        <BodyText text="Continue adding more steps as needed. Each step will trigger a new chart or visualization." />
      </section>

      <EndNotes notes={storyData.endNotes} />
    </div>
  </div>

  <SiteFooter />
</Theme>

<style lang="scss">
  .scrollytelling-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    min-height: 100vh;
  }

  .graphic-pane {
    position: sticky;
    top: 2rem;
    height: 80vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f9fa;
    border-radius: 8px;
    overflow: hidden;
  }

  .text-content {
    padding: 2rem 0;
  }

  .step {
    margin-bottom: 100vh;
    padding: 2rem;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .placeholder-chart {
    text-align: center;
    color: #666;
    
    h3 {
      font-size: 2rem;
      margin-bottom: 1rem;
    }
  }

  @media (max-width: 768px) {
    .scrollytelling-container {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .graphic-pane {
      position: relative;
      height: 50vh;
      top: 0;
    }

    .step {
      margin-bottom: 50vh;
    }
  }
</style>
`;

// Create +layout.ts
const layoutContent = `import type { LayoutLoad } from './$types.js';

export const load: LayoutLoad = async () => {
  return {
    // Add any data loading logic here if needed
  };
};
`;

// Write files
fs.writeFileSync(path.join(storyDir, '+page.svelte'), pageContent);
fs.writeFileSync(path.join(storyDir, '+layout.ts'), layoutContent);

console.log(`‚úÖ Created scrollytelling story: ${storyName}`);
console.log(`üìÅ Location: pages/${storyName}/`);
console.log(`üåê Visit: http://localhost:5173/${storyName}`);
console.log(`üìù Next steps:`);
console.log(`   1. Edit pages/${storyName}/+page.svelte`);
console.log(`   2. Add your chart components`);
console.log(`   3. Customize the story content`);
console.log(`   4. Add your data and sources`);
